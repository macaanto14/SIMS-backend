{
  "info": {
    "name": "SIMS SMS Service Test Collection",
    "description": "Comprehensive test collection for SIMS Backend SMS Service Implementation\n\nThis collection includes:\n- SMS verification code sending\n- SMS code verification\n- SMS verification status checking\n- Rate limiting tests\n- Error handling scenarios\n- Multiple phone number formats\n- Different purposes (registration, login, password_reset, two_factor)\n\nEnvironment Variables Required:\n- base_url: http://localhost:3000\n- auth_token: JWT token for authenticated endpoints\n- test_phone_et: +251927802065\n- test_phone_us: +15551234567\n- test_phone_invalid: invalid_phone",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "test_phone_et",
      "value": "+251927802065",
      "type": "string"
    },
    {
      "key": "test_phone_us",
      "value": "+15551234567",
      "type": "string"
    },
    {
      "key": "test_phone_invalid",
      "value": "invalid_phone",
      "type": "string"
    },
    {
      "key": "verification_code",
      "value": "123456",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "SMS Verification Tests",
      "item": [
        {
          "name": "Send Verification - Registration (Ethiopian Phone)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success property\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData.success).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"Response contains Twilio data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('sid');",
                  "    pm.expect(jsonData.data).to.have.property('status');",
                  "    pm.expect(jsonData.data).to.have.property('to');",
                  "});",
                  "",
                  "pm.test(\"Message indicates success\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Send SMS verification code for registration purpose using Ethiopian phone number"
          }
        },
        {
          "name": "Send Verification - Login (US Phone)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response structure is correct\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_us}}\",\n  \"purpose\": \"login\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Send SMS verification code for login purpose using US phone number"
          }
        },
        {
          "name": "Send Verification - Password Reset",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Purpose is password_reset\", function () {",
                  "    const requestBody = JSON.parse(pm.request.body.raw);",
                  "    pm.expect(requestBody.purpose).to.eql('password_reset');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"password_reset\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Send SMS verification code for password reset purpose"
          }
        },
        {
          "name": "Send Verification - Two Factor Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_us}}\",\n  \"purpose\": \"two_factor\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Send SMS verification code for two-factor authentication"
          }
        },
        {
          "name": "Send Verification - Custom Twilio Config",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400 (depending on config)\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400, 401]);",
                  "});",
                  "",
                  "pm.test(\"Response has proper structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"registration\",\n  \"twilioConfig\": {\n    \"accountSid\": \"AC_test_account_sid\",\n    \"authToken\": \"test_auth_token\",\n    \"serviceSid\": \"VA_test_service_sid\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Test sending SMS with custom Twilio configuration (will likely fail with test credentials)"
          }
        }
      ],
      "description": "Tests for sending SMS verification codes with different purposes and phone number formats"
    },
    {
      "name": "SMS Code Verification Tests",
      "item": [
        {
          "name": "Verify Code - Valid (Registration)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test(\"Response has proper structure\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Verification successful\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.be.true;",
                  "        pm.expect(jsonData.message).to.include('verified');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Invalid code response\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.be.false;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"code\": \"{{verification_code}}\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/verify-code",
              "host": ["{{base_url}}"],
              "path": ["sms", "verify-code"]
            },
            "description": "Verify SMS code for registration (use actual code received via SMS)"
          }
        },
        {
          "name": "Verify Code - Invalid Code",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for invalid code\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('Invalid');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"code\": \"000000\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/verify-code",
              "host": ["{{base_url}}"],
              "path": ["sms", "verify-code"]
            },
            "description": "Test verification with invalid code (should fail)"
          }
        },
        {
          "name": "Verify Code - Expired/No Verification",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error message for no verification\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('No valid verification');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"+251999999999\",\n  \"code\": \"123456\",\n  \"purpose\": \"login\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/verify-code",
              "host": ["{{base_url}}"],
              "path": ["sms", "verify-code"]
            },
            "description": "Test verification for phone number without pending verification"
          }
        },
        {
          "name": "Verify Code - Different Purpose",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test(\"Response structure is valid\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_us}}\",\n  \"code\": \"{{verification_code}}\",\n  \"purpose\": \"password_reset\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/verify-code",
              "host": ["{{base_url}}"],
              "path": ["sms", "verify-code"]
            },
            "description": "Verify SMS code for password reset purpose"
          }
        }
      ],
      "description": "Tests for verifying SMS codes with various scenarios including valid, invalid, and expired codes"
    },
    {
      "name": "SMS Status Check Tests",
      "item": [
        {
          "name": "Get Verification Status - Existing",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 404\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Status data structure is correct\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success');",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "        pm.expect(jsonData.data).to.have.property('status');",
                  "        pm.expect(jsonData.data).to.have.property('attempts');",
                  "        pm.expect(jsonData.data).to.have.property('maxAttempts');",
                  "    });",
                  "",
                  "    pm.test(\"Status is valid enum value\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        const validStatuses = ['pending', 'verified', 'expired', 'failed'];",
                  "        pm.expect(validStatuses).to.include(jsonData.data.status);",
                  "    });",
                  "} else {",
                  "    pm.test(\"No verification found message\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('No verification');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT token required for this endpoint"
              }
            ],
            "url": {
              "raw": "{{base_url}}/sms/status/{{test_phone_et}}/registration",
              "host": ["{{base_url}}"],
              "path": ["sms", "status", "{{test_phone_et}}", "registration"]
            },
            "description": "Get verification status for Ethiopian phone number with registration purpose"
          }
        },
        {
          "name": "Get Verification Status - Non-existent",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error message for non-existent verification\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('No verification');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{auth_token}}",
                "description": "JWT token required for this endpoint"
              }
            ],
            "url": {
              "raw": "{{base_url}}/sms/status/+251999888777/login",
              "host": ["{{base_url}}"],
              "path": ["sms", "status", "+251999888777", "login"]
            },
            "description": "Get verification status for non-existent phone number/purpose combination"
          }
        },
        {
          "name": "Get Verification Status - Without Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Unauthorized error message\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.include('Unauthorized');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/sms/status/{{test_phone_us}}/two_factor",
              "host": ["{{base_url}}"],
              "path": ["sms", "status", "{{test_phone_us}}", "two_factor"]
            },
            "description": "Test status endpoint without authentication (should fail)"
          }
        }
      ],
      "description": "Tests for checking SMS verification status with authentication requirements"
    },
    {
      "name": "Error Handling Tests",
      "item": [
        {
          "name": "Send Verification - Invalid Phone Number",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Invalid phone number error\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "    pm.expect(jsonData.message).to.include('Invalid phone number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_invalid}}\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Test sending SMS with invalid phone number format"
          }
        },
        {
          "name": "Send Verification - Invalid Purpose",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error for invalid purpose\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"invalid_purpose\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Test sending SMS with invalid purpose value"
          }
        },
        {
          "name": "Send Verification - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error for missing fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Test sending SMS without required purpose field"
          }
        },
        {
          "name": "Verify Code - Missing Required Fields",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Validation error for missing fields\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.success).to.be.false;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/verify-code",
              "host": ["{{base_url}}"],
              "path": ["sms", "verify-code"]
            },
            "description": "Test code verification without required code field"
          }
        }
      ],
      "description": "Tests for various error scenarios including invalid inputs and missing fields"
    },
    {
      "name": "Rate Limiting Tests",
      "item": [
        {
          "name": "Rate Limit Test - Multiple Requests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 429\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit error message\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.message).to.include('rate limit');",
                  "    });",
                  "} else {",
                  "    pm.test(\"Request successful\", function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.success).to.be.true;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"registration\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/sms/send-verification",
              "host": ["{{base_url}}"],
              "path": ["sms", "send-verification"]
            },
            "description": "Test rate limiting by sending multiple requests (run this multiple times quickly)"
          }
        }
      ],
      "description": "Tests for SMS rate limiting functionality"
    },
    {
      "name": "Integration Tests",
      "item": [
        {
          "name": "Full SMS Flow - Registration",
          "item": [
            {
              "name": "Step 1: Send Verification Code",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verification sent successfully\", function () {",
                      "    pm.response.to.have.status(200);",
                      "    const jsonData = pm.response.json();",
                      "    pm.expect(jsonData.success).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"Store verification data\", function () {",
                      "    const jsonData = pm.response.json();",
                      "    if (jsonData.data && jsonData.data.sid) {",
                      "        pm.collectionVariables.set('verification_sid', jsonData.data.sid);",
                      "    }",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"purpose\": \"registration\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/sms/send-verification",
                  "host": ["{{base_url}}"],
                  "path": ["sms", "send-verification"]
                },
                "description": "Step 1: Send verification code for registration"
              }
            },
            {
              "name": "Step 2: Check Status (Should be Pending)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status check successful\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Status should be pending\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.data.status).to.eql('pending');",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{auth_token}}",
                    "description": "JWT token required"
                  }
                ],
                "url": {
                  "raw": "{{base_url}}/sms/status/{{test_phone_et}}/registration",
                  "host": ["{{base_url}}"],
                  "path": ["sms", "status", "{{test_phone_et}}", "registration"]
                },
                "description": "Step 2: Check verification status (should be pending)"
              }
            },
            {
              "name": "Step 3: Verify Code (Manual Input Required)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Verification response received\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Code verified successfully\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.true;",
                      "        pm.expect(jsonData.message).to.include('verified');",
                      "    });",
                      "} else {",
                      "    pm.test(\"Invalid code (expected with test code)\", function () {",
                      "        const jsonData = pm.response.json();",
                      "        pm.expect(jsonData.success).to.be.false;",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"phoneNumber\": \"{{test_phone_et}}\",\n  \"code\": \"{{verification_code}}\",\n  \"purpose\": \"registration\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/sms/verify-code",
                  "host": ["{{base_url}}"],
                  "path": ["sms", "verify-code"]
                },
                "description": "Step 3: Verify the code (replace {{verification_code}} with actual SMS code)"
              }
            }
          ],
          "description": "Complete SMS verification flow for registration process"
        }
      ],
      "description": "End-to-end integration tests for complete SMS workflows"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set timestamp for unique testing",
          "pm.collectionVariables.set('timestamp', Date.now());",
          "",
          "// Log test execution",
          "console.log('Executing SMS Service Test:', pm.info.requestName);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test for response time",
          "pm.test('Response time is reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(10000);",
          "});",
          "",
          "// Global test for response format",
          "pm.test('Response is valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "// Log response for debugging",
          "if (pm.response.code >= 400) {",
          "    console.log('Error Response:', pm.response.json());",
          "}"
        ]
      }
    }
  ]
}