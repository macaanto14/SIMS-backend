{
  "info": {
    "name": "SIMS Backend API - Enhanced Collection",
    "description": "Comprehensive API collection with automated tests and workflows",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0.0"
  },
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{auth_token}}",
        "type": "string"
      }
    ]
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "auth_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "school_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "academic_year_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "class_id",
      "value": "",
      "type": "string"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global pre-request script",
          "pm.globals.set(\"timestamp\", new Date().toISOString());",
          "pm.globals.set(\"request_id\", pm.variables.replaceIn(\"{{$randomUUID}}\"));",
          "",
          "// Add request ID header",
          "pm.request.headers.add({",
          "    key: \"X-Request-ID\",",
          "    value: pm.globals.get(\"request_id\")",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script",
          "pm.test(\"Response time is less than 5000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\"Response has required headers\", function () {",
          "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
          "});",
          "",
          "// Log response for debugging",
          "console.log(\"Response Status:\", pm.response.status);",
          "console.log(\"Response Time:\", pm.response.responseTime + \"ms\");"
        ]
      }
    }
  ],
  "item": [
    {
      "name": "Environment Setup",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"API is healthy\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Database is connected\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.eql(\"healthy\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Clear All Variables",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/health",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Clear all collection variables",
                  "pm.collectionVariables.clear();",
                  "console.log(\"All collection variables cleared\");"
                ]
              }
            }
          ]
        }
      ],
      "description": "Environment setup and cleanup utilities"
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register a new user",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "register"
              ]
            },
            "description": "Creates a new user account with email verification.\n\n**Rate Limiting:** 5 requests per 15 minutes per IP\n\n**Validation Rules:**\n- Email must be valid and unique\n- Password must be at least 8 characters with uppercase, lowercase, number, and special character\n- First name and last name are required\n- Phone number must be valid format\n",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@school.com\",\n  \"password\": \"SecurePass123!\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\",\n  \"phone\": 1234567890,\n  \"school_id\": \"123e4567-e89b-12d3-a456-426614174000\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Endpoint-specific tests",
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has valid schema\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "// Extract auth token",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token updated\");",
                  "    }",
                  "    if (response.data && response.data.user && response.data.user.id) {",
                  "        pm.collectionVariables.set(\"user_id\", response.data.user.id);",
                  "        console.log(\"User ID updated\");",
                  "    }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Generate dynamic registration data",
                  "const timestamp = Date.now();",
                  "pm.globals.set(\"dynamic_email\", `test${timestamp}@example.com`);",
                  "pm.globals.set(\"dynamic_phone\", `+1${Math.floor(Math.random() * 9000000000) + 1000000000}`);"
                ]
              }
            }
          ]
        },
        {
          "name": "Authenticate user",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "login"
              ]
            },
            "description": "Authenticates a user with email and password, returning a JWT token.\n\n**Features:**\n- Automatic session management\n- Login attempt tracking\n- Account lockout protection\n- Multi-device support\n\n**Rate Limiting:** 5 attempts per 15 minutes per IP\n",
            "auth": {
              "type": "noauth"
            },
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"john.doe@school.com\",\n  \"password\": \"SecurePass123!\",\n  \"remember_me\": true\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Endpoint-specific tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has valid schema\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "// Extract auth token",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token updated\");",
                  "    }",
                  "    if (response.data && response.data.user && response.data.user.id) {",
                  "        pm.collectionVariables.set(\"user_id\", response.data.user.id);",
                  "        console.log(\"User ID updated\");",
                  "    }",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": []
              }
            }
          ]
        },
        {
          "name": "Get current user profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/profile",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "profile"
              ]
            },
            "description": "Retrieves the authenticated user's profile information including roles and permissions.\n\n**Caching:** Response is cached for 5 minutes to improve performance\n",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Endpoint-specific tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has valid schema\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "// Extract auth token",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token updated\");",
                  "    }",
                  "    if (response.data && response.data.user && response.data.user.id) {",
                  "        pm.collectionVariables.set(\"user_id\", response.data.user.id);",
                  "        console.log(\"User ID updated\");",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh authentication token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "refresh"
              ]
            },
            "description": "Generates a new JWT token using the current valid token.\nUseful for extending session without re-authentication.\n",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Endpoint-specific tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has valid schema\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "// Extract auth token",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token updated\");",
                  "    }",
                  "    if (response.data && response.data.user && response.data.user.id) {",
                  "        pm.collectionVariables.set(\"user_id\", response.data.user.id);",
                  "        console.log(\"User ID updated\");",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Logout user",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/v1/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "v1",
                "auth",
                "logout"
              ]
            },
            "description": "Invalidates the current JWT token and clears user session.\nToken will be added to blacklist to prevent reuse.\n",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{auth_token}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "// Endpoint-specific tests",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has valid schema\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.be.an(\"object\");",
                  "});",
                  "",
                  "// Extract auth token",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.data && response.data.token) {",
                  "        pm.collectionVariables.set(\"auth_token\", response.data.token);",
                  "        console.log(\"Auth token updated\");",
                  "    }",
                  "    if (response.data && response.data.user && response.data.user.id) {",
                  "        pm.collectionVariables.set(\"user_id\", response.data.user.id);",
                  "        console.log(\"User ID updated\");",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        }
      ],
      "description": "Authentication related endpoints",
      "event": []
    },
    {
      "name": "Complete User Workflow",
      "item": [
        {
          "name": "Step 1: Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{dynamic_email}}\",\n  \"password\": \"TestPassword123!\",\n  \"first_name\": \"Test\",\n  \"last_name\": \"User\",\n  \"phone\": \"{{dynamic_phone}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "register"
              ]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const timestamp = Date.now();",
                  "pm.globals.set(\"dynamic_email\", `workflow${timestamp}@example.com`);",
                  "pm.globals.set(\"dynamic_phone\", `+1${Math.floor(Math.random() * 9000000000) + 1000000000}`);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set(\"workflow_token\", response.data.token);",
                  "    pm.collectionVariables.set(\"workflow_user_id\", response.data.user.id);",
                  "    postman.setNextRequest(\"Step 2: Get User Profile\");",
                  "} else {",
                  "    postman.setNextRequest(null);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Step 2: Get User Profile",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{workflow_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/api/auth/profile",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "auth",
                "profile"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Profile retrieved successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile contains user data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.data).to.have.property(\"id\");",
                  "    pm.expect(response.data).to.have.property(\"email\");",
                  "});",
                  "",
                  "postman.setNextRequest(\"Step 3: Update User Profile\");"
                ]
              }
            }
          ]
        },
        {
          "name": "Step 3: Update User Profile",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{workflow_token}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"first_name\": \"Updated\",\n  \"last_name\": \"User\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/{{workflow_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "users",
                "{{workflow_user_id}}"
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "console.log(\"User workflow completed successfully!\");",
                  "postman.setNextRequest(null);"
                ]
              }
            }
          ]
        }
      ],
      "description": "Complete user registration, profile retrieval, and update workflow"
    }
  ]
}